@inject HttpClient Http
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@inject NavigationManager Navigator
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="dashboard-wrapper-div">
    <div class="upper-panel">
        <h1>Dashboard</h1>
    </div>

    @if (!WatchlistVisible)
    {
        <div class="searcher-tab">
            <div class="searcher-tab__autocomplete">
                <label>Company symbol</label>

                @if (ErrorOccured)
                {
                    <div class="not-found">Ticker not found!</div>
                }
                <SfAutoComplete TValue="string" TItem="TickerDetailsDTO" Query="@Query" PopupHeight="auto" PopupWidth="700px" @oninput="InputChangeHandler">
                    <AutoCompleteEvents TValue="string" TItem="TickerDetailsDTO" ValueChange="ValueChangeHandler"></AutoCompleteEvents>
                    <AutoCompleteFieldSettings Value="ShortCode" />
                    <SfDataManager Url=@GetUrlToSendRequestTo()
                                   Adaptor="Syncfusion.Blazor.Adaptors.WebApiAdaptor" CrossDomain=true></SfDataManager>
                    <AutoCompleteTemplates TItem="TickerDetailsDTO">
                        <ItemTemplate>
                            <span><span>@((context as TickerDetailsDTO).Name)</span><span>@((context as TickerDetailsDTO).CountryCode)</span></span>
                        </ItemTemplate>
                    </AutoCompleteTemplates>
                </SfAutoComplete>
            </div>
            <button @onclick="@SearchHandler">SEARCH</button>
            <button @onclick="@WatchlistButtonClickHandler">WATCHLIST</button>
        </div>
        @if (TickerDetails == null || TickerPrices == null || DailyOpenClose == null || TickerNews == null)
        {

            <p> No data to load yet</p>
        }
        else
        {
            <TickerData TickerDetails="TickerDetails" TickerNews="TickerNews" TickerPrices="TickerPrices" DailyOpenClose="DailyOpenClose" />
        }
    }
    else
    {

        <button @onclick="@CloseWatchlistHandler">Close Watchlist</button>
        <button class="not-found" @onclick="OnDeleteRowHandler">Delete selected row</button>
        <SfGrid TValue="TickerSimpleDTO" DataSource="@Watchlist"  AllowSorting="true" AllowPaging="true" @ref="TickersGrid">
            <GridEditSettings AllowDeleting="true"></GridEditSettings>
            <GridPageSettings PageSize="5"></GridPageSettings>
            <GridColumns>
                <GridColumn TextAlign="TextAlign.Center"
                            HeaderText="Logo">
                    <Template>
                        @{ 
                            var ticker = (context as TickerSimpleDTO);
                            <img class="ticker-logo-watchlist" src="@ticker.IconUrl" alt="No logo image provided">
                        }
                       
                    </Template>
                </GridColumn>
                <GridColumn Field=@nameof(TickerSimpleDTO.Name)
                            TextAlign="TextAlign.Center"
                            HeaderText="Name">
                </GridColumn>
                <GridColumn Field=@nameof(TickerSimpleDTO.Shortcode)
                            TextAlign="TextAlign.Center"
                            HeaderText="Shortcode">
                </GridColumn>
                <GridColumn Field=@nameof(TickerSimpleDTO.Market)
                            TextAlign="TextAlign.Center"
                            HeaderText="Market">
                </GridColumn>
                <GridColumn Field=@nameof(TickerSimpleDTO.CountryCode)
                            TextAlign="TextAlign.Center"
                            HeaderText="Country Code">
                </GridColumn>
            </GridColumns>
        </SfGrid>
    }


</div>

@code {
    SfGrid<TickerSimpleDTO> TickersGrid;
    private string TickerValue { get; set; } = "";
    private bool WatchlistVisible { get; set; } = false;
    private bool ErrorOccured { get; set; } = false;
    private string WatchlistUrl { get; set; }

    private TickerSimpleDTO TickerDetails;
    private DailyOpenCloseDTO DailyOpenClose;
    private TickerPricesDTO TickerPrices;
    private TickerNewsDTO[] TickerNews;
    private List<TickerSimpleDTO> Watchlist;
    private CommonDateNotationConverter _converter = new CommonDateNotationConverter();

    public Query Query = new Query();


    private async Task OnDeleteRowHandler()
    {
        var records = await TickersGrid.GetCurrentViewRecordsAsync();
        TickerSimpleDTO selectedItem = (await TickersGrid.GetSelectedRecordsAsync()).First();
        string selectedItemsShortcode = selectedItem.Shortcode;
        Watchlist.Remove(selectedItem);

        await Http.DeleteAsync(WatchlistUrl + $"/{selectedItem.Shortcode}");

    }

    private string GetUrlToSendRequestTo()
    {
        return Navigator.BaseUri + "Tickers";
    }

    private void InputChangeHandler(ChangeEventArgs args)
    {
        Query = new Query().AddParams("match", args.Value);
        TickerValue = args.Value.ToString();
        ErrorOccured = false;
    }

    private void ValueChangeHandler(ChangeEventArgs<string, TickerDetailsDTO> args)
    {
        TickerValue = args.Value;
        ErrorOccured = false;
    }

    private async Task WatchlistButtonClickHandler()
    {
        WatchlistVisible = !WatchlistVisible;
        if(WatchlistVisible)
        {
            Watchlist = await Http.GetFromJsonAsync<List<TickerSimpleDTO>>(WatchlistUrl);
        }
    }

    private async Task SearchHandler()
    {
        string threeMonthsAgo = _converter.FormatDateTimeToApiFriendlyFormat(DateTime.Now.AddMonths(-3));
        string yesterdaysDateFormatted = _converter.FormatDateTimeToApiFriendlyFormat(DateTime.Now.AddDays(-2));

        try
        {
            TickerDetails = await Http.GetFromJsonAsync<TickerSimpleDTO>($"Stocks/{TickerValue}");
            if (TickerDetails != null && TickerDetails.Shortcode.Equals(TickerValue))
            {
                DailyOpenClose = await Http.GetFromJsonAsync<DailyOpenCloseDTO>($"Stocks/{TickerValue}/{yesterdaysDateFormatted}");
                TickerPrices = await Http.GetFromJsonAsync<TickerPricesDTO>($"Stocks/{TickerValue}/Prizes/{threeMonthsAgo}");
                TickerNews = await Http.GetFromJsonAsync<TickerNewsDTO[]>($"Stocks/{TickerValue}/News/5");
            }
        }
        catch (Exception e)
        {
            ErrorOccured = true;
        }
    }

    private void CloseWatchlistHandler()
    {
        WatchlistVisible = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var email = authState.User.Identity.Name;
        var url = $"ApplicationUsers/{email}/Watchlist";
        await Http.PostAsJsonAsync<TickerSimpleDTO>(Navigator.BaseUri + url, null);
        WatchlistUrl = url;
    }
}

}


<style>
    .upper-panel {
        display: inline-flex;
        gap: 5%;
        padding: 20px;
        width: 100%;
    }

    .not-found {
        border: 0.2rem solid;
        background-color: #f85454;
        border-radius: 10px;
        border-color: red;
        color: red;
    }

    .logged-user {
        margin: 10px;
        border-radius: 10px;
        border-color: cornflowerblue;
    }

    .upper-panel > h1 {
        color: cornflowerblue;
    }

    .delete-button {
        background-color: red;
        border-radius: 7px;
        width: 60%;
    }

    .dashboard-wrapper-div button {
        background-color: cornflowerblue;
        color: white;
        border: none;
        width: 15%;
        border-radius: 5px;
        font: bolder;
    }

    .ticker-logo-watchlist {
        width: 50px;
        height: 50px
    }

    .dashboard-wrapper-div {
        color: cornflowerblue;
        font-size: 1.2rem;
    }

    .searcher-tab {
        width: 100%;
        display: inline-flex;
        gap: 2%;
    }

    .searcher-tab__autocomplete {
        width: 40%;
        display: block;
    }

    .item-data {
        display: inline-block;
    }

    .e-dropdownbase .e-list-item.e-item-focus, .e-dropdownbase .e-list-item.e-active, .e-dropdownbase .e-list-item.e-active.e-hover, .e-dropdownbase .e-list-item.e-hover {
        color: white;
        background: cornflowerblue;
        font: bold;
    }

    .template-item-last-item {
        right: 15px;
        position: absolute;
    }
</style>