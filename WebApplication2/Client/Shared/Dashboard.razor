@inject HttpClient Http
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data
@inject NavigationManager Navigator

<div class="dashboard-wrapper-div">
    <div class="upper-panel">
        <h1>Dashboard</h1>
    </div>
    <div class="searcher-tab">

        <div class="searcher-tab__autocomplete">
            <label>Company symbol</label>
            <SfAutoComplete TValue="string" TItem="TickerDetailsDTO" Query="@Query" PopupHeight="auto" PopupWidth="700px" @oninput="InputChangeHandler">
                <AutoCompleteEvents TValue="string" TItem="TickerDetailsDTO" ValueChange="ValueChangeHandler"></AutoCompleteEvents>
                <AutoCompleteFieldSettings Value="ShortCode" />
                <SfDataManager Url=@GetUrlToSendRequestTo()
                               Adaptor="Syncfusion.Blazor.Adaptors.WebApiAdaptor" CrossDomain=true></SfDataManager>
                <AutoCompleteTemplates TItem="TickerDetailsDTO">
                    <ItemTemplate>
                        <span><span>@((context as TickerDetailsDTO).Name)</span><span>@((context as TickerDetailsDTO).CountryCode)</span></span>
                    </ItemTemplate>
                </AutoCompleteTemplates>
            </SfAutoComplete>
        </div>
        <button @onclick="@SearchHandler">SEARCH</button>
        <button>WATCHLIST</button>
    </div>
    @if (TickerDetails == null || TickerPrices == null || DailyOpenClose == null)
    {

        <p>Loading data</p>
    }
    else
    {
        <TickerData TickerDetails="TickerDetails" TickerNews="TickerNews" TickerPrices="TickerPrices" DailyOpenClose="DailyOpenClose" />
    }
</div>

@code {
    private string TickerValue { get; set; } = "";

    private TickerSimpleDTO TickerDetails;
    private DailyOpenCloseDTO DailyOpenClose;
    private TickerPricesDTO TickerPrices;
    private TickerNewsDTO[] TickerNews;
    private CommonDateNotationConverter _converter = new CommonDateNotationConverter();

    public Query Query = new Query(); // new Query().Where("match", "equal", TickerValue).RequiresCount();


    private string GetUrlToSendRequestTo()
    {
        return Navigator.BaseUri + "Tickers";

    }

    private void InputChangeHandler(ChangeEventArgs args)
    {
        Query = new Query().AddParams("match", args.Value);
        TickerValue = args.Value.ToString();
    }

    private void ValueChangeHandler(ChangeEventArgs<string, TickerDetailsDTO> args)
    {
        TickerValue = args.Value;

    }

    private async Task SearchHandler()
    {
        string threeMonthsAgo = _converter.FormatDateTimeToApiFriendlyFormat(DateTime.Now.AddMonths(-3));
        string yesterdaysDateFormatted = _converter.FormatDateTimeToApiFriendlyFormat(DateTime.Now.AddDays(-1));

        TickerDetails = await Http.GetFromJsonAsync<TickerSimpleDTO>($"Stocks/{TickerValue}");
        if (TickerDetails != null && TickerDetails.Shortcode.Equals(TickerValue))
        {
            DailyOpenClose = await Http.GetFromJsonAsync<DailyOpenCloseDTO>($"Stocks/{TickerValue}/{yesterdaysDateFormatted}");
            TickerPrices = await Http.GetFromJsonAsync<TickerPricesDTO>($"Stocks/{TickerValue}/Prizes/{threeMonthsAgo}");
            TickerNews = await Http.GetFromJsonAsync<TickerNewsDTO[]>($"Stocks/{TickerValue}/News/5");
        }

    }

}
}


<style>
    .upper-panel {
        display: inline-flex;
        gap: 5%;
        padding: 20px;
        width: 100%;
    }

    .logged-user {
        margin: 10px;
        border-radius: 10px;
        border-color: cornflowerblue;
    }

    .upper-panel > h1 {
        color: cornflowerblue;
    }

    .dashboard-wrapper-div button {
        background-color: cornflowerblue;
        color: white;
        border: none;
        width: 7%;
        border-radius: 3px;
        font: bolder;
    }

    .dashboard-wrapper-div {
        color: cornflowerblue;
        font-size: 1.2rem;
    }

    .searcher-tab {
        width: 100%;
        display: inline-flex;
        gap: 2%;
    }

    .searcher-tab__autocomplete {
        width: 40%;
        display: block;
    }

    .item-data {
        display: inline-block;
    }

    .e-dropdownbase .e-list-item.e-item-focus, .e-dropdownbase .e-list-item.e-active, .e-dropdownbase .e-list-item.e-active.e-hover, .e-dropdownbase .e-list-item.e-hover {
        color: white;
        background: cornflowerblue;
        font: bold;
    }

    .template-item-last-item {
        right: 15px;
        position: absolute;
    }
</style>